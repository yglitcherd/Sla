-- Carrega a biblioteca Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Referências aos serviços
local lp = game.Players.LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local ts = game:GetService("TweenService")

-- Cria a interface da Rayfield
local Window = Rayfield:CreateWindow({
    Name = "Auto Miner",
    LoadingTitle = "Carregando Auto Miner",
    LoadingSubtitle = "by SeuNome",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "AutoMinerConfig"
    }
})

-- Cria uma aba
local Tab = Window:CreateTab("Mineração", nil)

-- Variáveis
local isMiningFarmHop = false
local selectedOre = game:GetService("ReplicatedStorage"):WaitForChild("LastSelectedOre").Value -- Obtém o minério selecionado do servidor anterior

-- Tabela de minérios com raridades
local oreRarities = {
    Darkstone = 99,
    Stone = 98,
    Copper = 0.5,
    Coal = 0.5,
    Iron = 0.5,
    Ruby = 0.5,
    Diamond = 0.25,
    ["Abyssal Stone"] = 0.1,
    Ambrosia = 0.1,
    Ammolite = 0.1,
    Platinum = 0.1,
    Dragonglass = 0.1,
    Plutonium = 0.1,
    Datolite = 0.05,
    Firecrystal = 0.05,
    Darkmatter = 0.05,
    Garnet = 0.01,
    Lithium = 0.01,
    Rainbonite = 0.01,
    Stellarite = 0.01,
    Constellatium = 0.005,
    Superium = 0.0001,
    Laventyx = 0.0001,
    Eclipse = 0.00001,
    Yumium = 0.00001
}

-- Lista de minérios
local oreList = {
    "Darkstone", "Stone", "Copper", "Chest", "Coal", "Iron", "Ruby", "Diamond",
    "Abyssal Stone", "Ambrosia", "Ammolite", "Platinum", "Dragonglass", "Plutonium",
    "Datolite", "Firecrystal", "Darkmatter", "Garnet", "Lithium", "Rainbonite",
    "Stellarite", "Constellatium", "Superium", "Laventyx", "Eclipse", "Yumium"
}

-- Função para encontrar o minério mais próximo do tipo especificado
local function getNearestOre(oreName)
    if not lp.Character or not lp.Character:FindFirstChild("HumanoidRootPart") then
        return nil
    end
    local hrp = lp.Character.HumanoidRootPart
    
    local nearest, distance = nil, math.huge
    for _, ore in pairs(workspace.Ores:GetChildren()) do
        if ore:IsA("BasePart") and ore.Name == oreName then
            local dist = (ore.Position - hrp.Position).Magnitude
            if dist < distance then
                distance = dist
                nearest = ore
            end
        end
    end
    return nearest
end

-- Função para teleportar o jogador até o minério usando TweenService
local function teleportToOre(ore)
    if not lp.Character or not lp.Character:FindFirstChild("HumanoidRootPart") or not ore then
        return false
    end
    local hrp = lp.Character.HumanoidRootPart
    
    local targetPos = ore.Position + Vector3.new(0, 1, 0)
    local targetCFrame = CFrame.new(targetPos) * CFrame.Angles(0, math.rad(ore.Orientation.Y), 0)
    
    local tweenInfo = TweenInfo.new(
        0.5,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    )
    local tween = ts:Create(hrp, tweenInfo, {CFrame = targetCFrame})
    tween:Play()
    tween.Completed:Wait()
    return true
end

-- Função para realizar server hop
local function serverHop()
    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    
    local servers = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
    local serverList = servers.data
    
    for _, server in pairs(serverList) do
        if server.playing < server.maxPlayers and server.id ~= game.JobId then
            TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id, lp)
            break
        end
    end
    wait(5) -- Delay caso o teleporte falhe
end

-- Loop de mineração para Farm Hop
local function farmHopLoop()
    while isMiningFarmHop do
        if not lp.Character or not lp.Character:FindFirstChild("HumanoidRootPart") then
            isMiningFarmHop = false
            return
        end
        
        local target = getNearestOre(selectedOre)
        if target and target.Name == selectedOre then
            local success = teleportToOre(target)
            if success and target and target.Parent then
                if target.Name == selectedOre then
                    rs.Events.MineOre:FireServer(target)
                end
            end
        else
            -- Salva o minério selecionado para o próximo servidor
            rs:WaitForChild("LastSelectedOre").Value = selectedOre
            -- Configura o script para executar no próximo servidor
            game:GetService("TeleportService"):SetTeleportGui("Switching servers...")
            QueueOnTeleport([[
                loadstring(game:HttpGet("https://raw.githubusercontent.com/SEU_USUARIO/SEU_REPOSITORIO/main/FarmHopQueue.lua"))()
            ]])
            -- Realiza o server hop
            serverHop()
            wait(10) -- Aguarda antes de tentar novamente
        end
        wait(0)
    end
end

-- Cria o Dropdown para selecionar o minério
local Dropdown = Tab:CreateDropdown({
    Name = "Selecionar Minério",
    Options = oreList,
    CurrentOption = selectedOre,
    Flag = "OreSelection",
    Callback = function(Option)
        if type(Option) == "table" then
            selectedOre = Option[1] or "Stone"
        else
            selectedOre = Option or "Stone"
        end
    end
})

-- Cria o botão de ligar/desligar para Farm Hop
local ToggleFarmHop = Tab:CreateToggle({
    Name = "Farm Hop",
    CurrentValue = true, -- Ativa automaticamente
    Flag = "FarmHopToggle",
    Callback = function(Value)
        isMiningFarmHop = Value
        if isMiningFarmHop then
            if not lp.Character or not lp.Character:FindFirstChild("HumanoidRootPart") then
                isMiningFarmHop = false
                return
            end
            spawn(farmHopLoop)
        end
    end
})

-- Inicia o Farm Hop automaticamente
if not lp.Character or not lp.Character:FindFirstChild("HumanoidRootPart") then
    lp.CharacterAdded:Wait()
end
isMiningFarmHop = true
spawn(farmHopLoop)
